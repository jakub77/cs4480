import java.net.*;
import java.io.*;
import java.util.*;

public class ProxyCache 
{
    /** Port for the proxy */
    private static int port;
    /** Socket for client connections */
    private static ServerSocket socket;
    
    /** Create the ProxyCache object and the socket */
    public static void init(int p) {
    	port = p;
    	try 
    	{
    		socket = new ServerSocket(port);
    	} 
    	catch (IOException e) 
    	{
    		System.out.println("Error creating socket: " + e);
    		System.exit(-1);
    	}
    }
    
    public static void handle(Socket client)
    {
    	Socket server = null;
    	HttpRequest request = null;
    	HttpResponse response = null;

    	/* Process request. If there are any exceptions, then simply
    	 * return and end this request. This unfortunately means the
    	 * client will hang for a while, until it timeouts. */

    	/* Read request */
    	try 
    	{
    	    BufferedReader fromClient = new BufferedReader(new InputStreamReader(client.getInputStream()));
    	    request = new HttpRequest(fromClient);
    	    
    	} 
    	catch (IOException e) 
    	{
    	    System.out.println("Error reading request from client: " + e);
    	    return;
    	} 	
    }
    
    public static void main(String args[]) {
    	int myPort = 0;
    	
    	try 
    	{
    	    myPort = Integer.parseInt(args[0]);
    	} 
    	catch (ArrayIndexOutOfBoundsException e) 
    	{
    	    System.out.println("Need port number as argument");
    	    System.exit(-1);
    	} 
    	catch (NumberFormatException e) 
    	{
    	    System.out.println("Please give port number as integer.");
    	    System.exit(-1);
    	}
    	
    	init(myPort);

    	/** Main loop. Listen for incoming connections and spawn a new
    	 * thread for handling them */
    	Socket client = null;
    	
    	while (true) 
    	{
    	    try 
    	    {
    	    	client = socket.accept();
    	    	handle(client);
    	    } 
    	    catch (IOException e) 
    	    {
    	    	System.out.println("Error reading request from client: " + e);
    	    	/* Definitely cannot continue processing this request,
    		 * 	so skip to next iteration of while loop. */
    	    	continue;
    	    }
    	}
    }
}
