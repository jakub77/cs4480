import java.net.*;
import java.io.*;
import java.util.*;

public class ProxyCache
{
	/** Port for the proxy */
	private static int port;
	/** Socket for client connections */
	private static ServerSocket socket;

	/** Create the ProxyCache object and the socket */
	public static void init(int p)
	{
		port = p;
		try
		{
			socket = new ServerSocket(port);
		}
		catch (IOException e)
		{
			System.out.println("Error creating socket: " + e);
			System.exit(-1);
		}
	}

	public static void handle(Socket client)
	{
		Socket server = null;
		HttpRequest request = null;
		HttpResponse response = null;

		/*
		 * Process request. If there are any exceptions, then simply return and
		 * end this request. This unfortunately means the client will hang for a
		 * while, until it timeouts.
		 */

		/* Read request */
		try
		{
			BufferedReader fromClient = new BufferedReader(new InputStreamReader(client.getInputStream()));
			request = new HttpRequest(fromClient);
			if(request.nullRequest)
			{
				return;			
			}
		}
		catch (IOException e)
		{
			System.out.println("Error reading request from client: " + e);
			return;
		}

		/* Send request to server */
		try
		{
			/* Open socket and write request to socket */
			server = new Socket(request.getHost(), request.getPort());
			DataOutputStream toServer = new DataOutputStream(server.getOutputStream());
			String reqString = request.toString();
			toServer.write(reqString.getBytes("UTF-8"));
			System.out.println("Sent Request String\n---\n" + reqString + "---\n");
		}
		catch (UnknownHostException e)
		{
			System.out.println("Unknown host: " + request.getHost());
			System.out.println(e);
			return;
		}
		catch (IOException e)
		{
			System.out.println("Error writing request to server: " + e);
			return;
		}

		/* Read response and forward it to client */
		try
		{     
			//BufferedReader fromServer = new BufferedReader(new InputStreamReader(server.getInputStream()));
			DataInputStream fromServer = new DataInputStream(server.getInputStream());
			response = new HttpResponse(fromServer);
			DataOutputStream toClient = new DataOutputStream(client.getOutputStream());
			//String rep = response.statusLine + "\r\n" + response.headers + response.bodyString;
			//toClient.write(rep.getBytes("UTF-8"));
			//toClient.write(response.bodyString.getBytes("UTF-8"));
			
			//toClient.write(response.toString().getBytes("UTF-8"));
			//toClient.write(response.body);
			
			byte buf1[] = response.toString().getBytes("UTF-8");
			byte buf[] = new byte[buf1.length + response.body.length];
			for(int i = 0; i < buf1.length; i++)
				buf[i] = buf1[i];
			for(int i = 0; i < response.body.length; i++)
				buf[i + buf1.length] = response.body[i];
			try
			{
				toClient.write(buf);
			}
			catch(Exception e)
			{
				System.out.println("Failed Write");
			}
			//String res = response.toString() + new String(response.body, "UTF-8");
			//toClient.write(res.getBytes("UTF-8"));			
			//toClient.write(response.body);
			//String s = new String(response.body);
			//String s2 = response.headers;

			/* Fill in */
			/* Write response to client. First headers, then body */
			client.close();
			server.close();
			/* Insert object into the cache */
			/* Fill in (optional exercise only) */
		}
		catch (IOException e)
		{
			System.out.println("Error writing response to client: " + e);
		}
	}

	public static void main(String args[])
	{
		int myPort = 0;

		try
		{
			myPort = Integer.parseInt(args[0]);
		}
		catch (ArrayIndexOutOfBoundsException e)
		{
			System.out.println("Need port number as argument");
			System.exit(-1);
		}
		catch (NumberFormatException e)
		{
			System.out.println("Please give port number as integer.");
			System.exit(-1);
		}

		init(myPort);

		/**
		 * Main loop. Listen for incoming connections and spawn a new thread for
		 * handling them
		 */
		Socket client = null;

		while (true)
		{
			try
			{
				client = socket.accept();
				handle(client);
			}
			catch (IOException e)
			{
				System.out.println("Error reading request from client: " + e);
				/*
				 * Definitely cannot continue processing this request, so skip
				 * to next iteration of while loop.
				 */
				continue;
			}
		}
	}
}
