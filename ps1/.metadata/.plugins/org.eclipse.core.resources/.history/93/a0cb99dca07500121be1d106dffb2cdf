import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.UnknownHostException;

public class ThreadedClient implements Runnable
{
	private Socket client;
	private HttpCache cache;
	private String CRLF = "\r\n";

	public ThreadedClient(Socket parameter, HttpCache cache, int threadNumber)
	{
		client = parameter;
		this.cache = cache;
	}

	public void run()
	{
		HttpRequest request = null;
		// Array that will be filled with the data to send back to the client.
		byte[] data;

		// Get the client request.
		try
		{
			BufferedReader fromClient = new BufferedReader(new InputStreamReader(client.getInputStream()));
			request = new HttpRequest(fromClient);
		}
		catch (IOException e)
		{
			System.out.println("Error reading request from client: " + e);
			return;
		}

		// Check to see if the request had errors in it.
		if (request.nullRequest)
			return;

		if (!request.method.equals("GET"))
		{
			data = GenerateError("501 Not Implemented");
			Send(client, data, true);
			System.out.println("Method wasn't GET.");
			return;
		}

		// See if we have a cached copy of the
		if (cache.InCache(request.absoluteURL))
		{
			data = cache.GetPage(request.absoluteURL);
			//System.out.println("Cache : " + request.absoluteURL);
		}
		else
		{
			// Request data from server.
			data = RequestFromServer(request);
			cache.InsertPage(request.absoluteURL, data);
			//System.out.println("Server: " + request.absoluteURL);
		}

		// Send data back to client
		Send(client, data, true);
	}

	public byte[] GenerateError(String error)
	{
		try
		{
			String body = "<!DOCTYPE html>" + CRLF;
			body += "<html><head><title>" + error;
			body += "</title></head><body><p>" + error;
			body += "</p></body></html>";

			byte[] bodyBytes = body.getBytes("UTF-8");

			String header = "HTTP/1.0 " + error + CRLF;
			header += "Content-Type: text/html; charset=UTF-8" + CRLF;
			header += "Content-Length: " + bodyBytes.length + CRLF + CRLF;
			byte[] headerBytes = header.getBytes("UTF-8");

			byte[] data = new byte[bodyBytes.length + headerBytes.length];
			for (int i = 0; i < headerBytes.length; i++)
				data[i] = headerBytes[i];
			for (int i = 0; i < bodyBytes.length; i++)
				data[i + headerBytes.length] = bodyBytes[i];
			return data;
		}
		catch (Exception e)
		{
			System.out.println("Exception in GenerateError: " + e);
			return new byte[0];
		}
	}

	public byte[] RequestFromServer(HttpRequest request)
	{
		byte[] data = new byte[0];
		if(request.getHost().length() == 0)
			return data;
		
		try
		{
			Socket server = new Socket(request.getHost(), request.getPort());
			Send(server, request.toString().getBytes("UTF-8"), false);
			DataInputStream fromServer = new DataInputStream(server.getInputStream());
			HttpResponse response = new HttpResponse(fromServer);
			byte[] headers = response.toString().getBytes("UTF-8");
			data = new byte[response.bodyBytes + headers.length];
			for (int i = 0; i < headers.length; i++)
				data[i] = headers[i];
			for (int i = 0; i < response.bodyBytes; i++)
				data[i + headers.length] = response.body[i];
			server.close();
			return data;
		}
		catch (UnknownHostException e)
		{
			System.out.println("Unknown Host: " + request.getHost());
			return data;
		}
		catch (Exception e)
		{
			System.out.println("Error in non-cache code " + e);
			return data;
		}
	}

	public void Send(Socket s, byte[] data, boolean closeConnection)
	{
		try
		{
			DataOutputStream to = new DataOutputStream(s.getOutputStream());
			try
			{
				to.write(data);
			}
			catch (Exception e)
			{
			}
			if (closeConnection)
				s.close();
		}
		catch (Exception e)
		{
			System.out.println("Exception in SendAndClose: " + e);
		}
	}
}